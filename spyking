#!/usr/bin/env python

import click
import os
import re
import posix

# click commands

@click.group()
def main():
    pass


# @main.command()
# @click.argument('filename', type=click.Path(exists=True))
# def copy_raw(filename):
#     """Create copy of .voltages file.
#     A new .data file will be created. Spyking-circus does destructive whitening
#     so this is a cationary step to avoid changing the data."""

#     copy_raw_helper(filename)


# def copy_raw_helper(filename):
#     name, ext = os.path.splitext(filename)
#     new_filename = name + '.data'
#     os.system('cp "{}" "{}"'.format(filename, new_filename))
#     print('Created copy of {}'.format(filename))

#     return new_filename


@main.command()
@click.argument('filename', type=click.Path(exists=True))
@click.option('--probe', '-p', default='/probes/mcs_60.prb',
              help="Spyking Circus Probe file")
def gen_params(filename, probe):
    """Create params file for Spyking Circus with default settings."""
    # TODO gen probe file based on header EL names / order
    name = os.path.splitext(filename)[0]
    new_filename = name + ".params"

    # skip if params exists
    if os.path.isfile(new_filename):
        return
    sampling_rate = get_sampling_rate(filename)
    params = re.sub('{{rate}}', str(sampling_rate), spyking_params)
    params = re.sub('{{probe}}', probe, params)
    with open(new_filename, 'w') as file:
        file.write(params)
    print('Generated params for {}'.format(filename))

spyking_circus_method_help = """by default, all 4 steps of the algorithm are \
performed, but a subset x,y can be done, using the syntax -m x,y. Steps are:
    - filtering
    - whitening
    - clustering
    - fitting
    - (extra) merging [meta merging]
    - (extra) gathering [to collect results]
    - (extra) extracting [templates from spike times]
    - (extra) converting [to export to phy format]
    - (extra) benchmarking [with -o and -t]
"""


@main.command()
@click.argument('filename', type=click.Path(exists=True))
@click.option('--method', '-m',
              default="filtering,whitening,clustering,fitting",
              help=spyking_circus_method_help)
@click.option('-c', default="4", help="Number of CPU")
@click.option('-g', default="0", help="Number of GPU")
def spyking_circus(filename, method, c, g):
    """Run spyking circus."""

    # use the following line for docker containers
    if os.environ['DOCKER']:
        print('init hosts')
        c = init_hosts()
        
    command = 'spyking-circus "{}" -m {} -c {} -g {}'.format(filename,
                                                             method,
                                                             c,
                                                             g)

    os.system(command)


@main.command()
@click.argument('filename', type=click.Path(exists=True))
@click.option('--method', '-m',
              default="filtering,whitening,clustering,fitting",
              help=spyking_circus_method_help)
@click.option('-c', default="4", help="Number of CPU")
@click.option('-g', default="0", help="Number of GPU")
@click.option('--probe', '-p', default='/probes/mcs_60.prb',
              help="Spyking Circus Probe file")
@click.pass_context
def run_all(context, filename, method, c, g, probe):
    """Create data file, create params & run Spyking Circus."""
    print('inside')
    # call fix_header and gen_params
    # new_filename = copy_raw_helper(filename)
    # context.invoke(fix_header, filename=filename)

    context.invoke(gen_params, filename=filename, probe=probe)
    context.invoke(spyking_circus, filename=filename, method=method, c=c, g=g)

# Functions


def init_hosts():
    os.system('nproc > /tmp/nproc')
    with open("/tmp/nproc", 'r') as file:
        num_processors = int(file.readline())
    with open("/root/spyking-circus/circus.hosts", 'w+') as file:
        file.write("localhost:{}".format(str(num_processors)))
    return num_processors


def get_sampling_rate(filename):
    header = get_header(filename)[0]
    return int(re.search("Sample rate = (\d+)", header).group(1))


def get_header(filename):
    header = ""
    header_end = "EOH\r\n".encode("Windows-1252")
    num_bytes = 0
    with open(filename, mode='rb') as file:
        for line in file:
            num_bytes += len(line)
            header += line.decode("Windows-1252", errors='replace')
            if line == header_end:
                break
            if num_bytes > 2000:
                break
    return header, num_bytes
# Strings


spyking_params = """[data]
data_offset    = MCS                    # Length of the header ('MCS' is auto for MCS file)
mapping        = {{probe}}     # Mapping of the electrode (see http://spyking-circus.rtfd.ord)
suffix         =                        # Suffix to add to generated files
data_dtype     = int16                 # Type of the data
dtype_offset   = auto                   # Padding for data (if auto: uint16 is 32767, uint8 is 127, int16 is 0, ...)
spike_thresh   = 6                      # Threshold for spike detection
skip_artefact  = False                  # Skip part of signals with large fluctuations
sampling_rate  = {{rate}}                  # Sampling rate of the data [Hz]
N_t            = 5                      # Width of the templates [in ms]
stationary     = True                   # Should be False for long recordings: adaptive thresholds
radius         = auto                   # Radius [in um] (if auto, read from the prb file)
alignment      = True                   # Realign the waveforms by oversampling
global_tmp     = False                   # should be False if local /tmp/ has enough space (better for clusters)
multi-files    = False                  # If several files mydata_0,1,..,n.dat should be processed together (see documentation

[filtering]
cut_off        = 500       # Cut off frequency for the butterworth filter [Hz]
filter         = True      # If True, then a low-pass filtering is performed
remove_median  = False     # If True, median over all channels is substracted to each channels (movement artifacts)

[whitening]
chunk_size     = 60        # Size of the data chunks [in s]
safety_time    = 1         # Temporal zone around which templates are isolated [in ms]
temporal       = False     # Perform temporal whitening
spatial        = True      # Perform spatial whitening
max_elts       = 10000     # Max number of events per electrode (should be compatible with nb_elts)
nb_elts        = 0.8       # Fraction of max_elts that should be obtained per electrode [0-1]
output_dim     = 5         # Can be in percent of variance explain, or num of dimensions for PCA on waveforms

[clustering]
extraction     = median-raw # Can be either median-raw (default), median-pca, mean-pca, mean-raw, or quadratic
safety_space   = True       # If True, we exclude spikes in the vicinity of a selected spikes
safety_time    = 1       # Temporal zone around which templates are isolated [in ms]
max_elts       = 10000      # Max number of events per electrode (should be compatible with nb_elts)
nb_elts        = 0.8        # Fraction of max_elts that should be obtained per electrode [0-1]
nclus_min      = 0.01       # Min number of elements in a cluster (given in percentage)
max_clusters   = 10         # Maximal number of clusters for every electrodes
nb_repeats     = 3          # Number of passes used for the clustering
smart_search   = 0          # Parameter for the smart search [0-1]. The higher, the more strict
sim_same_elec  = 3          # Distance within clusters under which they are re-merged
cc_merge       = 0.975      # If CC between two templates is higher, they are merged
noise_thr      = 0.8        # Minimal amplitudes are such than amp*min(templates) < noise_thr*threshold in [0-1]
make_plots     = png        # Generate sanity plots of the clustering [Nothing or None if no plots]
remove_mixture = True       # At the end of the clustering, we remove mixtures of templates

[fitting]
chunk          = 1         # Size of chunks used during fitting [in second]
gpu_only       = False      # Use GPU for computation of b's AND fitting
amp_limits     = (0.3, 30)  # Amplitudes for the templates during spike detection
amp_auto       = True      # True if amplitudes are adjusted automatically for every templates
refractory     = 0         # Refractory period, in ms [0 is None]
max_chunk      = inf       # Fit only up to max_chunk   

[merging]
cc_overlap     = 0.5       # Only templates with CC higher than cc_overlap may be merged
cc_bin         = 2         # Bin size for computing CC [in ms]

[extracting]
safety_time    = 1         # Temporal zone around which spikes are isolated [in ms]
max_elts       = 1000      # Max number of collected events per templates
output_dim     = 5         # Percentage of variance explained while performing PCA
cc_merge       = 0.975     # If CC between two templates is higher, they are merged
noise_thr      = 0.8       # Minimal amplitudes are such than amp*min(templates) < noise_thr*threshold

[noedits]
filter_done    = False     # Will become True automatically after filtering.

"""

mc_elec_str = r'wine ~/.wine/drive_c/Program\ Files/Multi\ Channel\ Systems/MC_DataTool/MC_DataTool.com -bin -i "%input_filename%" -o "%output_filename%" -s "Electrode Raw Data:21" -s "Electrode Raw Data:31" -s "Electrode Raw Data:41" -s "Electrode Raw Data:51" -s "Electrode Raw Data:61" -s "Electrode Raw Data:71" -s "Electrode Raw Data:12" -s "Electrode Raw Data:22" -s "Electrode Raw Data:32" -s "Electrode Raw Data:42" -s "Electrode Raw Data:52" -s "Electrode Raw Data:62" -s "Electrode Raw Data:72" -s "Electrode Raw Data:82" -s "Electrode Raw Data:13" -s "Electrode Raw Data:23" -s "Electrode Raw Data:33" -s "Electrode Raw Data:43" -s "Electrode Raw Data:53" -s "Electrode Raw Data:63" -s "Electrode Raw Data:73" -s "Electrode Raw Data:83" -s "Electrode Raw Data:14" -s "Electrode Raw Data:24" -s "Electrode Raw Data:34" -s "Electrode Raw Data:44" -s "Electrode Raw Data:54" -s "Electrode Raw Data:64" -s "Electrode Raw Data:74" -s "Electrode Raw Data:84" -s "Electrode Raw Data:15" -s "Electrode Raw Data:25" -s "Electrode Raw Data:35" -s "Electrode Raw Data:45" -s "Electrode Raw Data:55" -s "Electrode Raw Data:65" -s "Electrode Raw Data:75" -s "Electrode Raw Data:85" -s "Electrode Raw Data:16" -s "Electrode Raw Data:26" -s "Electrode Raw Data:36" -s "Electrode Raw Data:46" -s "Electrode Raw Data:56" -s "Electrode Raw Data:66" -s "Electrode Raw Data:76" -s "Electrode Raw Data:86" -s "Electrode Raw Data:17" -s "Electrode Raw Data:27" -s "Electrode Raw Data:37" -s "Electrode Raw Data:47" -s "Electrode Raw Data:57" -s "Electrode Raw Data:67" -s "Electrode Raw Data:77" -s "Electrode Raw Data:87" -s "Electrode Raw Data:28" -s "Electrode Raw Data:38" -s "Electrode Raw Data:48" -s "Electrode Raw Data:58" -s "Electrode Raw Data:68" -s "Electrode Raw Data:78" -WriteHeader -ToSigned'
mc_analog_str = r'wine ~/.wine/drive_c/Program\ Files/Multi\ Channel\ Systems/MC_DataTool/MC_DataTool.com -bin -i "%input_filename%" -o "%output_filename%" -s "Analog Raw Data:A1" -WriteHeader -ToSigned'

if __name__ == '__main__':
    main()